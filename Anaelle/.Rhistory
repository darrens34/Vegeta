donnees = donnees[,-which(colnames(donnees)=="TS_2")]
donnees = donnees[,-which(colnames(donnees)=="TS_3")] # Enleve TS_2 et TS_3 car correles a TS
#############  Transforme les dates
donnees$dates = strptime(donnees$date,format = "%Y-%m-%d %H:%M:%S")
donnees$heure_solaire = strptime(donnees$heure_solaire,format = "%Y-%m-%d %H:%M:%S")
#############  Supprime colonnes inutiles pour le moment
donnees<- donnees[,-which(names(donnees) %in% c("TIMESTAMP_START","TIMESTAMP_END","DTime","dates","heure_solaire"))]
######### ######### #########
######### Regarde les correlations entre variables
######### ######### #########
core <- cor(donnees,method="pearson",use = "pairwise.complete.obs")
write.csv(core,"correlations_entre_variables.csv")
donnees<- donnees[,-which(names(donnees) %in% c("NETRAD","PPFD_DIF"	,"PPFD_OUT"	,"SW_IN","SW_OUT"	,"H","LE","RH","TA","TAU","USTAR","G"))]
head(donnees)
############# Importer les donnÃ©es
path<-"F:/MIASHS/TER/Vegeta/data/data_sans_NA/Puechabon_2010_vpd.csv"
donnees_base <- read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
head(donnees_base)
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
summary(donnees_base)
donnees_base = donnees_base[,-1]# supprime premier colonne d'index
donnees_base = donnees_base[,-which(colnames(donnees_base)=="TS_2")]
donnees_base = donnees_base[,-which(colnames(donnees_base)=="TS_3")] # Enleve TS_2 et TS_3 car correles a TS
#############  Transforme les dates
donnees_base$dates = strptime(donnees_base$date,format = "%Y-%m-%d %H:%M:%S")
donnees_base$heure_solaire = strptime(donnees_base$heure_solaire,format = "%Y-%m-%d %H:%M:%S")
data = cbind(SAP_FLOW = donnees$SAP_FLOW[-c(1:6)],
date = donnees_base$dates[-c(1:6)],
heure_solaire = donnees_base$heure_solaire[-c(1:6)],
P_2h30 = donnees$P[-c(1,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
PA_3h = donnees$PA[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
PPFD_IN_1h = donnees$PPFD_IN[-c(1:4,nrow(donnees)-1,nrow(donnees))],
TS = donnees$TS[-c(1:6)],
WD_2h = donnees$WD[-c(1:2,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
WS_3h = donnees$WS[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
CO2 = donnees$CO2[-c(1:6)],
FC_1h = donnees$FC[-c(1:4,nrow(donnees)-1,nrow(donnees))],
H2O_3h = donnees$H2O[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
SB = donnees$SB[-c(1:6)],
SC_3h = donnees$SC[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
SH_3h = donnees$SH[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
ZL_3h = donnees$ZL[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
PRI_1h30 = donnees$PRI[-c(1:3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
VPD = donnees$VPD[-c(1:6)])
######### ######### #########
######### Selection finale des parametres:
######### ######### #########
data = as.data.frame(data)
summary(data)
mod_fin = regsubsets(SAP_FLOW ~  P_2h30+ PA_3h  +PPFD_IN_1h + TS + WD_2h+WS_3h+ CO2 +  FC_1h  + H2O_3h  + SB + SC_3h +SH_3h  +ZL_3h +PRI_1h30  + VPD,
data = data,method = "exhaustive",nvmax=ncol(data)-1) # 28 est le nombre total de variableplot(mod1, scale = "bic")
plot(mod_fin, scale = "bic")
obj_mod_fin = summary(mod_fin)
res_mod_fin = obj_mod_fin$which[which.min(obj_mod_fin$bic),]*1
sum(res_mod_fin) # nb de variables retenues
res_mod_fin
data = cbind(SAP_FLOW = donnees$SAP_FLOW[-c(1:6)],
date = donnees_base$dates[-c(1:6)],
heure_solaire = donnees_base$heure_solaire[-c(1:6)],
P_2h30 = donnees$P[-c(1,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
PA_3h = donnees$PA[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
PPFD_IN_1h = donnees$PPFD_IN[-c(1:4,nrow(donnees)-1,nrow(donnees))],
TS = donnees$TS[-c(1:6)],
WD_2h = donnees$WD[-c(1:2,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
WS_3h = donnees$WS[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
CO2 = donnees$CO2[-c(1:6)],
FC_1h = donnees$FC[-c(1:4,nrow(donnees)-1,nrow(donnees))],
H2O_3h = donnees$H2O[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
SB = donnees$SB[-c(1:6)],
SC_3h = donnees$SC[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
SH_3h = donnees$SH[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
ZL_3h = donnees$ZL[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
PRI_1h30 = donnees$PRI[-c(1:3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
VPD = donnees$VPD[-c(1:6)])
donnees_base$dates[-c(1:6)]
length(donnees_base$dates[-c(1:6)])
length(donnees_base$SAP_FLOW[-c(1:6)])
length(donnees_base$heure_solaire[-c(1:6)])
data = cbind(SAP_FLOW = donnees$SAP_FLOW[-c(1:6)],
date = donnees_base$dates[-c(1:6)],
heure_solaire = donnees_base$heure_solaire[-c(1:6)],
P_2h30 = donnees$P[-c(1,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))])
data = cbind(SAP_FLOW = donnees$SAP_FLOW[-c(1:6)],
dates = donnees_base$dates[-c(1:6)],
heure_solaire = donnees_base$heure_solaire[-c(1:6)])
donnees_base$heure_solaire[-c(1:6)]
length(donnees_base$heure_solaire[-c(1:6)])
length(donnees$SAP_FLOW[-c(1:6)])
cbind(donnees_base$dates[-c(1:6)])
length( donnees_base$date[-c(1:6)])
data = cbind(SAP_FLOW = donnees$SAP_FLOW[-c(1:6)],
dates = donnees_base$date[-c(1:6)],
heure_solaire = donnees_base$heure_solaire[-c(1:6)],
P_2h30 = donnees$P[-c(1,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
PA_3h = donnees$PA[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
PPFD_IN_1h = donnees$PPFD_IN[-c(1:4,nrow(donnees)-1,nrow(donnees))],
TS = donnees$TS[-c(1:6)],
WD_2h = donnees$WD[-c(1:2,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
WS_3h = donnees$WS[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
CO2 = donnees$CO2[-c(1:6)],
FC_1h = donnees$FC[-c(1:4,nrow(donnees)-1,nrow(donnees))],
H2O_3h = donnees$H2O[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
SB = donnees$SB[-c(1:6)],
SC_3h = donnees$SC[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
SH_3h = donnees$SH[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
ZL_3h = donnees$ZL[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
PRI_1h30 = donnees$PRI[-c(1:3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
VPD = donnees$VPD[-c(1:6)])
length(donnees_base$date[-c(1:6)])
donnees_base$date[-c(1:6)]
length(donnees$SAP_FLOW[-c(1:6)])
length(donnees_base$date[-c(1:6)])
length(donnees_base$heure_solaire[-c(1:6)])
length(donnees$P[-c(1,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))])
data = cbind(SAP_FLOW = donnees$SAP_FLOW[-c(1:6)],
dates = donnees_base$date[-c(1:6)],
heure_solaire = donnees_base$heure_solaire[-c(1:6)],
P_2h30 = donnees$P[-c(1,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
PA_3h = donnees$PA[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
PPFD_IN_1h = donnees$PPFD_IN[-c(1:4,nrow(donnees)-1,nrow(donnees))],
TS = donnees$TS[-c(1:6)],
WD_2h = donnees$WD[-c(1:2,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
WS_3h = donnees$WS[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
CO2 = donnees$CO2[-c(1:6)],
FC_1h = donnees$FC[-c(1:4,nrow(donnees)-1,nrow(donnees))],
H2O_3h = donnees$H2O[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
SB = donnees$SB[-c(1:6)],
SC_3h = donnees$SC[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
SH_3h = donnees$SH[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
ZL_3h = donnees$ZL[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
PRI_1h30 = donnees$PRI[-c(1:3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
VPD = donnees$VPD[-c(1:6)])
dim(data)
head(data)
head(donnees_base)
donnees_base$dates[-c(1:6)
]
donnees_base$heure_solaire[-c(1:6)]
data = cbind(SAP_FLOW = donnees$SAP_FLOW[-c(1:6)],
dates = donnees_base$dates[-c(1:6)],
heure_solaire = donnees_base$heure_solaire[-c(1:6)],
P_2h30 = donnees$P[-c(1,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
PA_3h = donnees$PA[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
PPFD_IN_1h = donnees$PPFD_IN[-c(1:4,nrow(donnees)-1,nrow(donnees))],
TS = donnees$TS[-c(1:6)],
WD_2h = donnees$WD[-c(1:2,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
WS_3h = donnees$WS[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
CO2 = donnees$CO2[-c(1:6)],
FC_1h = donnees$FC[-c(1:4,nrow(donnees)-1,nrow(donnees))],
H2O_3h = donnees$H2O[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
SB = donnees$SB[-c(1:6)],
SC_3h = donnees$SC[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
SH_3h = donnees$SH[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
ZL_3h = donnees$ZL[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
PRI_1h30 = donnees$PRI[-c(1:3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
VPD = donnees$VPD[-c(1:6)])
head(data)
data = data.frame(SAP_FLOW = donnees$SAP_FLOW[-c(1:6)],
dates = donnees_base$dates[-c(1:6)],
heure_solaire = donnees_base$heure_solaire[-c(1:6)],
P_2h30 = donnees$P[-c(1,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
PA_3h = donnees$PA[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
PPFD_IN_1h = donnees$PPFD_IN[-c(1:4,nrow(donnees)-1,nrow(donnees))],
TS = donnees$TS[-c(1:6)],
WD_2h = donnees$WD[-c(1:2,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
WS_3h = donnees$WS[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
CO2 = donnees$CO2[-c(1:6)],
FC_1h = donnees$FC[-c(1:4,nrow(donnees)-1,nrow(donnees))],
H2O_3h = donnees$H2O[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
SB = donnees$SB[-c(1:6)],
SC_3h = donnees$SC[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
SH_3h = donnees$SH[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
ZL_3h = donnees$ZL[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
PRI_1h30 = donnees$PRI[-c(1:3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
VPD = donnees$VPD[-c(1:6)])
head(data)
summary(data)
mod_fin = regsubsets(SAP_FLOW ~  P_2h30+ PA_3h  +PPFD_IN_1h + TS + WD_2h+WS_3h+ CO2 +  FC_1h  + H2O_3h  + SB + SC_3h +SH_3h  +ZL_3h +PRI_1h30  + VPD,
data = data,method = "exhaustive",nvmax=ncol(data)-1) # 28 est le nombre total de variableplot(mod1, scale = "bic")
plot(mod_fin, scale = "bic")
obj_mod_fin = summary(mod_fin)
res_mod_fin = obj_mod_fin$which[which.min(obj_mod_fin$bic),]*1
sum(res_mod_fin) # nb de variables retenues
res_mod_fin
write.csv(data,"Puechabon_2010_post_model.csv")
path<-"F:/MIASHS/TER/Vegeta/data/data_post_modelisation/Puechabon_2010_post_model.csv"
donnees <- read.table(path,sep=",",dec=".",header=T)
head(donnees)
summary(donnees)
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
# Modele complet:
mod<-lm(SAP_FLOW ~ P_2h30 + PPFD_IN_1h  +TS+ WD_2h+ CO2 +FC_1h+H2O_3h + SB+ SH_3h+ ZL_3h + PRI_1h30 + VPD, data = donnees)
summary(mod)
head(donnees)
class(donnees$dates)
t
t
donnees$dates = strptime(donnees$date,format = "%Y-%m-%d %H:%M:%S")
donnees$heure_solaire = strptime(donnees$heure_solaire,format = "%Y-%m-%d %H:%M:%S")
path<-"F:/MIASHS/TER/Vegeta/data/data_post_modelisation/Puechabon_2010_post_model.csv"
donnees <- read.table(path,sep=",",dec=".",header=T)
head(donnees)
summary(donnees)
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
donnees = donnees[,-1]
head(donnees)
X = donnees[,-which(names(donnees) %in% c("SAP_FLOW","dates","heure_solaire"))]
levels(donnees$heure_solaire)
var_heure<-NULL
for (i in levels(donnees$heure_solaire)){
vec<-apply(X[donnees$heure_solaire==i,],MARGIN=2,FUN=mean,na.rm=TRUE)
var_heure<-cbind(var_heure,vec)
}
colnames(var_heure)<-levels(donnees$heure_solaire)
var_heure
plot(predict.lm(mod,newdata=as.data.frame(t(var_heure)))~seq(0,23.50,0.50),ylab="Flux de sÃ¨ve predit",xlab="Heure solaire",type="l",col="darkgreen")
as.data.frame(t(var_heure)))
as.data.frame(t(var_heure))
mod<-lm(SAP_FLOW ~ P_2h30 + PPFD_IN_1h  +TS+ WD_2h+ CO2 +FC_1h+H2O_3h + SB+ SH_3h+ ZL_3h + PRI_1h30 + VPD, data = donnees)
summary(mod)
?predict.lm
plot(predict.lm(mod,newdata=as.data.frame(t(var_heure)),na.action = na.omit)~seq(0,23.50,0.50),ylab="Flux de sÃ¨ve predit",xlab="Heure solaire",type="l",col="darkgreen")
predict.lm(mod,newdata=as.data.frame(t(var_heure)),na.action = na.omit)
predict.lm(mod,newdata=as.data.frame(t(var_heure)),na.action =na.exclude)
plot(predict.lm(mod,newdata=as.data.frame(t(var_heure)),na.action =napass)~seq(0,23.50,0.50),ylab="Flux de sÃ¨ve predit",xlab="Heure solaire",type="l",col="darkgreen")
predict.lm(mod,newdata=as.data.frame(t(var_heure)),na.action =na.pass)
library(leaps)
?regsubsets
######### ######### #########
######### importer et transformer les donnÃ©es
######### ######### #########
############# Importer les donnÃ©es
path<-"F:/MIASHS/TER/Vegeta/data/data_sans_NA/Puechabon_2010_vpd.csv"
donnees_base <- read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
head(donnees_base)
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
summary(donnees_base)
donnees_base = donnees_base[,-1]# supprime premier colonne d'index
donnees_base = donnees_base[,-which(colnames(donnees_base)=="TS_2")]
donnees_base = donnees_base[,-which(colnames(donnees_base)=="TS_3")] # Enleve TS_2 et TS_3 car correles a TS
#############  Transforme les dates
donnees_base$dates = strptime(donnees_base$date,format = "%Y-%m-%d %H:%M:%S")
donnees_base$heure_solaire = strptime(donnees_base$heure_solaire,format = "%Y-%m-%d %H:%M:%S")
#############  Supprime colonnes inutiles pour le moment
donnees<- donnees[,-which(names(donnees) %in% c("TIMESTAMP_START","TIMESTAMP_END","DTime","dates","heure_solaire"))]
donnees = donnees[,-which(colnames(donnees)=="PRI")]
core <- cor(donnees,method="pearson",use = "pairwise.complete.obs")
########## Importer les librairies
library(leaps)
?regsubsets
######### ######### #########
######### importer et transformer les donnÃ©es
######### ######### #########
############# Importer les donnÃ©es
path<-"F:/MIASHS/TER/Vegeta/data/data_sans_NA/Puechabon_2010_vpd.csv"
donnees_base <- read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
head(donnees_base)
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
summary(donnees_base)
donnees_base = donnees_base[,-1]# supprime premier colonne d'index
donnees_base = donnees_base[,-which(colnames(donnees_base)=="TS_2")]
donnees_base = donnees_base[,-which(colnames(donnees_base)=="TS_3")] # Enleve TS_2 et TS_3 car correles a TS
#############  Transforme les dates
donnees_base$dates = strptime(donnees_base$date,format = "%Y-%m-%d %H:%M:%S")
donnees_base$heure_solaire = strptime(donnees_base$heure_solaire,format = "%Y-%m-%d %H:%M:%S")
#############  Supprime colonnes inutiles pour le moment
donnees<- donnees[,-which(names(donnees) %in% c("TIMESTAMP_START","TIMESTAMP_END","DTime","dates","heure_solaire"))]
names(donnees)
donnees<- donnees_base[,-which(names(donnees_base) %in% c("TIMESTAMP_START","TIMESTAMP_END","DTime","dates","heure_solaire"))]
donnees = donnees[,-which(colnames(donnees)=="PRI")]
head(donnees)
core <- cor(donnees,method="pearson",use = "pairwise.complete.obs")
donnees<- donnees[,-which(names(donnees) %in% c("NETRAD","PPFD_DIF"	,"PPFD_OUT"	,"SW_IN","SW_OUT"	,"H","LE","RH","TA","TAU","USTAR","G"))]
######### Selection du meilleur modele au temps t
mod1 = regsubsets(SAP_FLOW ~  P+ PA  +PPFD_IN + TS + WD+WS+ CO2 +  FC  + H2O  + SB + SC +SH  +SLE+ZL +PRI  + VPD,
data = donnees,method = "exhaustive",nvmax=ncol(donnees)-1) # 28 est le nombre total de variable
plot(mod1, scale = "bic")
obj_mod1 = summary(mod1)
res_mod1 = obj_mod1$which[which.min(obj_mod1$bic),]*1
sum(res_mod1) # nb de variables retenues
res_mod1
mod1 = regsubsets(SAP_FLOW ~  P+ PA  +PPFD_IN + TS + WD+WS+ CO2 +  FC  + H2O  + SB + SC +SH  +SLE+ZL   + VPD,
data = donnees,method = "exhaustive",nvmax=ncol(donnees)-1) # 28 est le nombre total de variable
plot(mod1, scale = "bic")
obj_mod1 = summary(mod1)
res_mod1 = obj_mod1$which[which.min(obj_mod1$bic),]*1
sum(res_mod1) # nb de variables retenues
res_mod1
donnees_30 = cbind(SAP_FLOW=donnees$SAP_FLOW[-1],donnees[-nrow(donnees),-which(colnames(donnees)=="SAP_FLOW")])
mod1 = regsubsets(SAP_FLOW ~  P+ PA  +PPFD_IN + TS + WD+WS+ CO2 +  FC  + H2O  + SB + SC +SH  +SLE+ZL   + VPD,
data = donnees_30,method = "exhaustive",nvmax=ncol(donnees_30)-1) # 28 est le nombre total de variableplot(mod1, scale = "bic")
obj_mod1 = summary(mod1)
res_mod1 = obj_mod1$which[which.min(obj_mod1$bic),]*1
sum(res_mod1) # nb de variables retenues
res_mod1
donnees_1h = cbind(SAP_FLOW=donnees$SAP_FLOW[-c(1,2)],donnees[-c(nrow(donnees)-1,nrow(donnees)),-which(colnames(donnees)=="SAP_FLOW")])
mod1 = regsubsets(SAP_FLOW ~  P+ PA  +PPFD_IN + TS + WD+WS+ CO2 +  FC  + H2O  + SB + SC +SH  +SLE+ZL   + VPD,
data = donnees_1h,method = "exhaustive",nvmax=ncol(donnees_1h)-1) # 28 est le nombre total de variableplot(mod1, scale = "bic")
plot(mod1, scale = "bic")
obj_mod1 = summary(mod1)
res_mod1 = obj_mod1$which[which.min(obj_mod1$bic),]*1
sum(res_mod1) # nb de variables retenues
res_mod1
donnees_1h30 = cbind(SAP_FLOW=donnees$SAP_FLOW[-c(1:3)],donnees[-c(nrow(donnees):(nrow(donnees)-2)),-which(colnames(donnees)=="SAP_FLOW")])
mod1 = regsubsets(SAP_FLOW ~  P+ PA  +PPFD_IN + TS + WD+WS+ CO2 +  FC  + H2O  + SB + SC +SH  +SLE+ZL   + VPD,
data = donnees_1h30,method = "exhaustive",nvmax=ncol(donnees_1h30)-1) # 28 est le nombre total de variableplot(mod1, scale = "bic")
plot(mod1, scale = "bic")
obj_mod1 = summary(mod1)
res_mod1 = obj_mod1$which[which.min(obj_mod1$bic),]*1
sum(res_mod1) # nb de variables retenues
res_mod1
donnees_2h = cbind(SAP_FLOW=donnees$SAP_FLOW[-c(1:4)],donnees[-c(nrow(donnees):(nrow(donnees)-3)),-which(colnames(donnees)=="SAP_FLOW")])
mod1 = regsubsets(SAP_FLOW ~  P+ PA  +PPFD_IN + TS + WD+WS+ CO2 +  FC  + H2O  + SB + SC +SH  +SLE+ZL   + VPD,
data = donnees_2h,method = "exhaustive",nvmax=ncol(donnees_2h)-1) # 28 est le nombre total de variableplot(mod1, scale = "bic")
plot(mod1, scale = "bic")
obj_mod1 = summary(mod1)
res_mod1 = obj_mod1$which[which.min(obj_mod1$bic),]*1
sum(res_mod1) # nb de variables retenues
res_mod1
######### Selection du meilleur modele au temps t + 2 heure 30 TODO
donnees_2h30 = cbind(SAP_FLOW=donnees$SAP_FLOW[-c(1:5)],donnees[-c(nrow(donnees):(nrow(donnees)-4)),-which(colnames(donnees)=="SAP_FLOW")])
mod1 = regsubsets(SAP_FLOW ~  P+ PA  +PPFD_IN + TS + WD+WS+ CO2 +  FC  + H2O  + SB + SC +SH  +SLE+ZL   + VPD,
data = donnees_2h30,method = "exhaustive",nvmax=ncol(donnees_2h30)-1) # 28 est le nombre total de variableplot(mod1, scale = "bic")
plot(mod1, scale = "bic")
obj_mod1 = summary(mod1)
res_mod1 = obj_mod1$which[which.min(obj_mod1$bic),]*1
sum(res_mod1) # nb de variables retenues
res_mod1
donnees_3h = cbind(SAP_FLOW=donnees$SAP_FLOW[-c(1:6)],donnees[-c(nrow(donnees):(nrow(donnees)-5)),-which(colnames(donnees)=="SAP_FLOW")])
mod1 = regsubsets(SAP_FLOW ~  P+ PA  +PPFD_IN + TS + WD+WS+ CO2 +  FC  + H2O  + SB + SC +SH  +SLE+ZL   + VPD,
data = donnees_3h,method = "exhaustive",nvmax=ncol(donnees_3h)-1) # 28 est le nombre total de variableplot(mod1, scale = "bic")
plot(mod1, scale = "bic")
obj_mod1 = summary(mod1)
res_mod1 = obj_mod1$which[which.min(obj_mod1$bic),]*1
sum(res_mod1) # nb de variables retenues
res_mod1
liste_variable = c("P", "PA", "PPFD_IN"  , "TS" , "WD" , "WS" , "CO2" , "FC" ,  "H2O" , "SB" , "SC" , "SH" ,"SLE","ZL", "VPD")
liste_decalage = c("donnees", "donnees_30","donnees_1h","donnees_1h30","donnees_2h","donnees_2h30","donnees_3h")
decalage = list()
variable = list()
compt = 0
for( i in c(liste_variable))
{
res_bic = list()
for(les_donnees in liste_decalage )
{
res_bic = c(res_bic, BIC(lm(SAP_FLOW~get(i),data = get(les_donnees))))
}
compt = compt + 1
decalage[compt] = liste_decalage[which.min(res_bic)]
variable[compt] = i
}
cbind(decalage,variable)
data = data.frame(SAP_FLOW = donnees$SAP_FLOW[-c(1:6)],
dates = donnees_base$dates[-c(1:6)],
heure_solaire = donnees_base$heure_solaire[-c(1:6)],
P_2h30 = donnees$P[-c(1,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
PA_3h = donnees$PA[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
PPFD_IN_1h = donnees$PPFD_IN[-c(1:4,nrow(donnees)-1,nrow(donnees))],
TS = donnees$TS[-c(1:6)],
WD_2h = donnees$WD[-c(1:2,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
WS_3h = donnees$WS[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
CO2 = donnees$CO2[-c(1:6)],
FC_1h = donnees$FC[-c(1:4,nrow(donnees)-1,nrow(donnees))],
H2O_3h = donnees$H2O[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
SB = donnees$SB[-c(1:6)],
SC_3h = donnees$SC[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
SH_3h = donnees$SH[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
SLE_3h = donnees$SLE[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
ZL_3h = donnees$ZL[-c(nrow(donnees)-5,nrow(donnees)-4,nrow(donnees)-3,nrow(donnees)-2,nrow(donnees)-1,nrow(donnees))],
VPD = donnees$VPD[-c(1:6)])
summary(data)
summary(data)
mod_fin = regsubsets(SAP_FLOW ~  P_2h30+ PA_3h  +PPFD_IN_1h + TS + WD_2h+WS_3h+ CO2 +  FC_1h  + H2O_3h  + SB + SC_3h +SH_3h +SLE_3h +ZL_3h   + VPD,
data = data,method = "exhaustive",nvmax=ncol(data)-1) # 28 est le nombre total de variableplot(mod1, scale = "bic")
plot(mod_fin, scale = "bic")
obj_mod_fin = summary(mod_fin)
res_mod_fin = obj_mod_fin$which[which.min(obj_mod_fin$bic),]*1
sum(res_mod_fin) # nb de variables retenues
res_mod_fin
summary(lm(SAP_FLOW ~ PPFD_IN_1h  +TS+ WD_2h+ CO2 +FC_1h+H2O_3h + SB+ SH_3h+SLE_3h+ ZL_3h + VPD, data = data))
data<- data[,-which(names(data) %in% c("P_2h30","PA_3h","WS_3h","SC_3h"))]
write.csv(data,"Puechabon_2010_post_model.csv")
path<-"F:/MIASHS/TER/Vegeta/data/data_post_modelisation/Puechabon_2010_post_model.csv"
donnees <- read.table(path,sep=",",dec=".",header=T)
head(donnees)
summary(donnees)
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
donnees = donnees[,-1]
X = donnees[,-which(names(donnees) %in% c("SAP_FLOW","dates","heure_solaire"))]
mod<-lm(SAP_FLOW ~ PPFD_IN_1h  +TS+ WD_2h+ CO2 +FC_1h+H2O_3h + SB+ SH_3h+SLE_3h+ ZL_3h + VPD, data = donnees)
summary(mod)
# moyenne des parametres pour chaque heure pour faire une courbe de sap flow predite moyenne
var_heure<-NULL
for (i in levels(donnees$heure_solaire)){
vec<-apply(X[donnees$heure_solaire==i,],MARGIN=2,FUN=mean,na.rm=TRUE)
var_heure<-cbind(var_heure,vec)
}
colnames(var_heure)<-levels(donnees$heure_solaire)
plot(predict.lm(mod,newdata=as.data.frame(t(var_heure)),na.action =na.pass)~seq(0,23.50,0.50),ylab="Flux de sÃ¨ve predit",xlab="Heure solaire",type="l",col="darkgreen")
coef<-round(mod$coefficients,4)
coef
equation_modele_global <- paste("Flux de sÃ¨ve = ",coef[1]," + ",coef[2]," PPFD_IN_1h + ",coef[3]," TS + ",
coef[4]," WD_2h + ",coef[5],"CO2 + ",coef[6]," FC_1h + ",coef[7]," H2O_3h + ",
coef[8]," SB + ",coef[9]," SH_3h + ",coef[10]," SLE_3h + ",coef[11]," ZL_3h + ",coef[12]," VPD")
equation_modele_global
write.csv(var_heure,"X_par_heure.csv")
plot(predict.lm(mod,newdata=as.data.frame(t(var_heure)))~seq(0,23.50,0.50),ylab="Flux de sÃ¨ve predit",xlab="Heure solaire",type="l",col="darkgreen")
data.frame(predict.lm(mod,newdata=as.data.frame(t(var_heure))))
write.csv(var_heure,"X_par_heure.csv")
write.csv(data.frame(predict.lm(mod,newdata=as.data.frame(t(var_heure)))),"y_predit_par_heure.csv")
equation_modele_global
path<-"F:/MIASHS/TER/Vegeta/data/data_brut/Shale_Hills.csv"
donnees <- read.table(path,sep=",",dec=",",header=T,na.strings = c("-9999","NA"))
donnees <- read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
head(donnees)
donnees <- read.table(path,sep="\t",dec=".",header=T,na.strings = c("-9999","NA"))
head(donnees)
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
which(!is.na(donnees$time) == TRUE)
donnees$time
which(!is.na(donnees$time) )
which(is.na(donnees$time)
)
donnees <- read.table(path,sep="\t",dec=".",header=T,na.strings = c("-9999","NA",""))
head(donnees)
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
which(!is.na(donnees$time) )
paste( donnees$date[which(!is.na(donnees$time) )],
donnees$time[which(!is.na(donnees$time) )])
head(donnees)
donnees$date[which(!is.na(donnees$time) )] <- paste( donnees$date[which(!is.na(donnees$time) )],
donnees$time[which(!is.na(donnees$time) )])
donnees$date[which(!is.na(donnees$time) )]
donnees[939,]
which(!is.na(donnees$time) )
which(!is.na(donnees$time) )
ligne = which(!is.na(donnees$time) )
length(ligne)
length(donnees$date)
lengh(paste( donnees$date[ligne],donnees$time[ligne]))
length(paste( donnees$date[ligne],donnees$time[ligne]))
donnees$date[ligne] <- paste( donnees$date[ligne],donnees$time[ligne])
length(donnees$date[ligne])
length(paste( donnees$date[ligne],donnees$time[ligne]))
paste( donnees$date[ligne],donnees$time[ligne])
path<-"F:/MIASHS/TER/Vegeta/data/data_brut/Shale_Hills.csv"
donnees <- read.table(path,sep="\t",dec=".",header=T,na.strings = c("-9999","NA",""))
head(donnees)
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
paste( donnees$date[ligne],donnees$time[ligne])
ligne = which(!is.na(donnees$time) )
donnees$date[ligne] <- paste( donnees$date[ligne],donnees$time[ligne])
donnees$date[ligne]
donnees$date[ligne]
donnees <- read.table(path,sep="\t",dec=".",header=T,na.strings = c("-9999","NA",""))
donnees$date[ligne]
paste( donnees$date[ligne],donnees$time[ligne])
dates <-donnees$date
which(is.na(dates))
dates <-donnees$date
dates[ligne]
dates[ligne] <- paste( donnees$date[ligne],donnees$time[ligne])
donnees$date = as.character(donnees$date)
head(donnees)
path<-"F:/MIASHS/TER/Vegeta/data/data_brut/Shale_Hills.csv"
donnees <- read.table(path,sep="\t",dec=".",header=T,na.strings = c("-9999","NA",""))
head(donnees)
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
# ligne ou le time est a part
ligne = which(!is.na(donnees$time) )
donnees$date = as.character(donnees$date)
donnees$time = as.character(donnees$time)
donnees$date[ligne] <- paste( donnees$date[ligne],donnees$time[ligne])
donnees$date[ligne]
donnees$date = strptime(donnees$date,format = "%d/%m/%Y %H:%M")
which(is.na(donnees$date))
donnees[162762,]
path<-"F:/MIASHS/TER/Vegeta/data/data_brut/Shale_Hills.csv"
donnees <- read.table(path,sep="\t",dec=".",header=T,na.strings = c("-9999","NA",""))
head(donnees)
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
# ligne ou le time est a part
ligne = which(!is.na(donnees$time) )
donnees$date = as.character(donnees$date)
donnees$time = as.character(donnees$time)
donnees$date[ligne] <- paste( donnees$date[ligne],donnees$time[ligne])
donnees$date = strptime(donnees$date,format = "%d/%m/%Y %H:%M")
which(is.na(donnees$date))
donnees$date
head(donnees)
which(is.na(donnees$sap_flow))
donnees = donnees[-which(is.na(donnees$sap_flow)),]
donnees = donnees[-which(is.na(donnees$time)),]
head(donnees)
path<-"F:/MIASHS/TER/Vegeta/data/data_brut/Shale_Hills.csv"
donnees <- read.table(path,sep="\t",dec=".",header=T,na.strings = c("-9999","NA",""))
head(donnees)
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
# ligne ou le time est a part
ligne = which(!is.na(donnees$time) )
donnees$date = as.character(donnees$date)
donnees$time = as.character(donnees$time)
donnees$date[ligne] <- paste( donnees$date[ligne],donnees$time[ligne])
donnees$date = strptime(donnees$date,format = "%d/%m/%Y %H:%M")
which(is.na(donnees$sap_flow))
head(donnees)
donnees = donnees[-which(is.na(donnees$sap_flow)),]
head(donnees)
donnees = donnees[,-which(names(donnees)=="time")]
head(donnees)
write.csv(donnees,"Shale_Hills.csv")
