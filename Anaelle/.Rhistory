############# Importer les données
path<-"F:/MIASHS/TER/Vegeta/data/data_train_test/Puechabon_train.csv"
donnes_train<-read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
donnes_train$type<-"train"
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
summary(donnes_train)
donnes_train = donnes_train[,-which(colnames(donnes_train)=="X")]# supprime premier colonne d'index
#############  Transforme les dates
donnes_train$dates = strptime(donnes_train$date,format = "%Y-%m-%d %H:%M:%S")
donnes_train$heure_solaire = strptime(donnes_train$heure_solaire,format = "%H:%M")
#############  Supprime colonnes inutiles pour le moment
donnees<- donnes_train[,-which(names(donnes_train) %in% c("dates","heure_solaire","type"))]
path<-"F:/MIASHS/TER/Vegeta/data/data_train_test/Puechabon_test.csv"
donnes_test<-read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
donnes_test= donnes_test[,-which(colnames(donnes_test)=="X")]# supprime premier colonne d'index
#############  Supprime colonnes inutiles pour le moment
donnes_test<- donnes_test[,-which(names(donnes_test) %in% c("dates","heure_solaire","type"))]
### transformation des variables
SB_trans =  9.5 / ( 1 + exp ((8-donnes_test[,which(colnames(donnes_test)=="SB")]) / 4))
LE_30m_trans = 9 / ( 1 + exp ((92-donnes_test[,which(colnames(donnes_test)=="LE_30m")]) / 34))
VPD_trans = 9 / ( 1 + exp ((1.06-donnes_test[,which(colnames(donnes_test)=="VPD")]) / 0.33))
CO2_trans = 0.00000000002 * exp(10000/donnes_test[,which(colnames(donnes_test)=="CO2")])
donnes_test = cbind(donnes_test,SB_trans,LE_30m_trans,VPD_trans,CO2_trans)
pred <- predict.lm(mod,donnes_test)
mod = lm(SAP_FLOW ~ P_1h + PPFD_IN_1h + TS +  WD_1h30+ WS+
SH_3h +USTAR_30m+ ZL_3h +SB_trans+LE_30m_trans+ VPD_trans+ CO2_trans, data = donnees)
############# Importer les données
path<-"F:/MIASHS/TER/Vegeta/data/data_train_test/Puechabon_train.csv"
donnes_train<-read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
donnes_train$type<-"train"
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
summary(donnes_train)
donnes_train = donnes_train[,-which(colnames(donnes_train)=="X")]# supprime premier colonne d'index
#############  Transforme les dates
donnes_train$dates = strptime(donnes_train$date,format = "%Y-%m-%d %H:%M:%S")
donnes_train$heure_solaire = strptime(donnes_train$heure_solaire,format = "%H:%M")
#############  Supprime colonnes inutiles pour le moment
donnees<- donnes_train[,-which(names(donnes_train) %in% c("dates","heure_solaire","type"))]
#Ajust
i="TA"
y<-donnees$SAP_FLOW
x<-donnees[,which(names(donnees)==i)]
plot(y~x,xlab=i,ylab="sap flow")
xplot<-min(x,na.rm=T):max(x,na.rm=T)
points(9.5 / ( 1 + exp ((20-xplot) / 4)) ~ xplot,type="l",col="red",lwd=4)
trans <- 9.5 / ( 1 + exp ((20-x) / 4))
trans[which(trans=="Inf")]<-0
plot(donnees$SAP_FLOW~trans,xlab =i)
donnees$"TA_trans"<-trans
#Ajust
i="SB"
y<-donnees$SAP_FLOW
x<-donnees[,which(names(donnees)==i)]
plot(y~x,xlab=i,ylab="sap flow")
xplot<-min(x,na.rm=T):max(x,na.rm=T)
points(9.5 / ( 1 + exp ((8-xplot) / 4)) ~ xplot,type="l",col="red",lwd=4)
trans <- 9.5 / ( 1 + exp ((8-x) / 4))
trans[which(trans=="Inf")]<-0
plot(donnees$SAP_FLOW~trans,xlab =i)
donnees$"SB_trans"<-trans
i="G"
y<-donnees$SAP_FLOW
x<-donnees[,which(names(donnees)==i)]
plot(y~x,xlab=i,ylab="sap flow")
xplot<-min(x,na.rm=T):max(x,na.rm=T)
points(9.5 / ( 1 + exp ((6-xplot) / 3)) ~ xplot,type="l",col="red",lwd=4)
trans <- 9.5 / ( 1 + exp ((6-x) / 3))
trans[which(trans=="Inf")]<-0
plot(donnees$SAP_FLOW~trans,xlab =i)
donnees$"G_trans"<-trans
#Ajust
i="LE_30m"
y<-donnees$SAP_FLOW
x<-donnees[,which(names(donnees)==i)]
plot(y~x,xlab=i,ylab="sap flow")
xplot<-min(x,na.rm=T):max(x,na.rm=T)
points(9 / ( 1 + exp ((92-xplot) / 34)) ~ xplot,type="l",col="red",lwd=4)
trans <- 9 / ( 1 + exp ((92-x) / 34))
trans[which(trans=="Inf")]<-0
plot(donnees$SAP_FLOW~trans,xlab =i)
donnees$"LE_30m_trans"<-trans
i="VPD"
y<-donnees$SAP_FLOW
x<-donnees[,which(names(donnees)==i)]
plot(y~x,xlab=i,ylab="sap flow")
xplot<-min(x,na.rm=T):max(x,na.rm=T)
points(9 / ( 1 + exp ((1.06-xplot) / 0.33)) ~ xplot,type="l",col="red",lwd=4)
trans <- 9 / ( 1 + exp ((1.06-x) / 0.33))
trans[which(trans=="Inf")]<-0
plot(donnees$SAP_FLOW~trans,xlab =i)
donnees$"VPD_trans"<-trans
######### ######### #########
i = "CO2"
#Ajust
y<-donnees$SAP_FLOW
x<-donnees[,which(names(donnees)==i)]
# Plot obs:
plot(y~x,xlab=i,ylab="sap flow")
xplot<-330:max(x,na.rm=T)
#points(0.0000000000000000000001 * exp(10000/(xplot-200)) ~ xplot,type="l",col="red",lwd=4)
points(0.00000000002 * exp(10000/(xplot+0)) ~ xplot,type="l",col="red",lwd=4)
trans <- 0.00000000002 * exp(10000/(x+0))
trans[which(trans=="Inf")]<-0
plot(donnees$SAP_FLOW~trans,xlab =i,xlim=c(0,20))
donnees$"CO2_trans"<-trans
i = "FC_1h"
#Ajust
y<-donnees$SAP_FLOW
x<-donnees[,which(names(donnees)==i)]
# Plot obs:
plot(y~x,xlab=i,ylab="sap flow")
xplot<-min(x,na.rm=T):max(x,na.rm=T)
#points(0.0000000000000000000001 * exp(10000/(xplot-200)) ~ xplot,type="l",col="red",lwd=4)
points(0.01 * exp(210/(xplot+50)) ~ xplot,type="l",col="red",lwd=4)
trans <- 0.01 * exp(210/(x+50))
trans[which(trans=="Inf")]<-0
plot(donnees$SAP_FLOW~trans,xlab =i,xlim=c(0,20))
donnees$"FC_1h_trans"<-trans
######### ######### #########
######### TAU_30m
######### ######### #########
i = "TAU_30m"
#Ajust
y<-donnees$SAP_FLOW
x<-donnees[,which(names(donnees)==i)]
# Plot obs:
plot(y~x,xlab=i,ylab="sap flow")
xplot<-seq(from=min(x,na.rm=T),to=max(x,na.rm=T),by=0.01)
#points(0.0000000000000000000001 * exp(10000/(xplot-200)) ~ xplot,type="l",col="red",lwd=4)
points(0.01 * exp(1/(xplot+0)) ~ xplot,type="l",col="red",lwd=4)
trans <- 0.01 * exp(1/(x+0))
trans[which(trans=="Inf")]<-0
plot(donnees$SAP_FLOW~trans,xlab =i,xlim=c(0,20))
donnees$"TAU_30m_trans"<-trans
######### ######### #########
######### Enleve données de base qui ont été transformées
######### ######### #########
donnees = donnees[,-which(colnames(donnees) %in% c("TA","SB","G",  "LE_30m","VPD","CO2","FC_1h","TAU_30m"))]
donnees <-donnees[-1102,] # outlier
donnees<- donnees[,-which(names(donnees) %in% c("NETRAD_1h30","PPFD_OUT_1h"	,"SW_IN_1h","SW_OUT_30m"	,"TS_2","TS_3","G_trans"))]
mod = lm(SAP_FLOW ~ P_1h + PPFD_IN_1h + TS +  WD_1h30+ WS+
SH_3h +USTAR_30m+ ZL_3h +SB_trans+LE_30m_trans+ VPD_trans+ CO2_trans, data = donnees)
######
summary(mod) # R2 adj = 0.93
plot(mod)
path<-"F:/MIASHS/TER/Vegeta/Vegeta_Web/data/puechabon/reg_non_lin/X_par_heure.csv"
X <- read.table(path,sep=",",dec=".",header=T,row.names = 1)
head(X)
# Transformation des X gardés dans le modèle :
SB_trans =  9.5 / ( 1 + exp ((8-X[which(rownames(X)=="SB"),]) / 4))
X = rbind(X,"SB_trans"=SB_trans)
X = X[-which(rownames(X)=="SB"),]
LE_30m_trans = 9 / ( 1 + exp ((92-X[which(rownames(X)=="LE_30m"),]) / 34))
X = rbind(X,"LE_30m_trans"=LE_30m_trans)
X = X[-which(rownames(X)=="LE_30m"),]
VPD_trans = 9 / ( 1 + exp ((1.06-X[which(rownames(X)=="VPD"),]) / 0.33))
X = rbind(X,"VPD_trans"=VPD_trans)
X = X[-which(rownames(X)=="VPD"),]
CO2_trans = 0.00000000002 * exp(10000/X[which(rownames(X)=="CO2"),])
X = rbind(X,"CO2_trans"=CO2_trans)
X = X[-which(rownames(X)=="CO2"),]
plot(predict.lm(mod,newdata=as.data.frame(t(X)))~seq(0,23.50,0.50),ylab="Flux de sève predit",xlab="Heure solaire",type="l",col="darkgreen")
write.csv(data.frame(predict.lm(mod,newdata=as.data.frame(t(X)))),"y_predit_par_heure.csv")
i = "CO2"
#Ajust
y<-donnees$SAP_FLOW
x<-donnees[,which(names(donnees)==i)]
# Plot obs:
plot(y~x,xlab=i,ylab="sap flow")
plot(y~x,xlab=i,ylab="sap flow")
i = "CO2"
#Ajust
y<-donnees$SAP_FLOW
x<-donnees[,which(names(donnees)==i)]
# Plot obs:
plot(y~x,xlab=i,ylab="sap flow")
names(donnees)
donnees$"CO2_trans"
path<-"F:/MIASHS/TER/Vegeta/data/data_train_test/Puechabon_train.csv"
donnes_train<-read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
donnes_train$type<-"train"
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
summary(donnes_train)
donnes_train = donnes_train[,-which(colnames(donnes_train)=="X")]# supprime premier colonne d'index
#############  Transforme les dates
donnes_train$dates = strptime(donnes_train$date,format = "%Y-%m-%d %H:%M:%S")
donnes_train$heure_solaire = strptime(donnes_train$heure_solaire,format = "%H:%M")
#############  Supprime colonnes inutiles pour le moment
donnees<- donnes_train[,-which(names(donnes_train) %in% c("dates","heure_solaire","type"))]
donnees$co2
donnees$CO2
min(donnees$CO2)
min(donnees$CO2,na.rm=TRUE)
max(donnees$CO2,na.rm=TRUE)
0.00000000002 * exp(10000/(400))
0.00000000002 * exp(10000/(450))
0.00000000002 * exp(10000/(450)mod)
summary(mod)
