######### ######### #########
######### importer et transformer les données
######### ######### #########
############# Importer les données
path<-"F:/MIASHS/TER/Vegeta/data/data_train_test/Puechabon_train.csv"
donnees_base <- read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
head(donnees_base)
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
summary(donnees_base)
#############  Transforme les dates
donnees_base$dates = strptime(donnees_base$date,format = "%Y-%m-%d %H:%M:%S")
donnees_base$heure_solaire = strptime(donnees_base$heure_solaire,format = "%H:%M")
#############  Supprime colonnes inutiles pour le moment
donnees_base = donnees_base[,-1]# supprime premier colonne d'index
donnees<- donnees_base[,-which(names(donnees_base) %in% c("TIMESTAMP_START","TIMESTAMP_END","DTime","dates","heure_solaire"))]
######### ######### #########
######### Regarde les correlations entre variables
######### ######### #########
corDF = cor(donnees,use="complete.obs")
dissimilarity <- 1 - abs(corDF)
distance <- as.dist(dissimilarity)
hc <- hclust(distance)
clusterV = cutree(hc,h=0.05)
print(clusterV)
?as.dist
dissimilarity
print(clusterV)
clusterV = cutree(hc,h=0.10)
print(clusterV)
?cutree
hc
corDF = cor(donnees,use="complete.obs")
dissimilarity <- 1 - abs(corDF)
distance <- as.dist(dissimilarity)
hc <- hclust(distance)
clusterV = cutree(hc,h=0.05)
print(clusterV)
library(FactoMineR)
library(factoextra) # pour les graphes
library(tidyverse)
library(dplyr)
library(tidyr)
######### ######### #########
######### importer et transformer les données de base
######### ######### #########
############# Importer les données
path<-"F:/MIASHS/TER/Vegeta/data/data_train_test/Puechabon_train.csv"
donnees_base <- read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
head(donnees_base)
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
summary(donnees_base)
path<-"F:/MIASHS/TER/Vegeta/data/data_brut/Puechabon_2010_vpd.csv"
donnees <- read.table(path,sep=",",dec=",",header=T,na.strings = c("-9999","NA"))
head(donnees)
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
# Nettoyage valeurs bizarre de PA
donnees<-donnees[-which(as.numeric(donnees$PA) < 96),]
# Enleve lignes ou NA dans sap flow
donnees<-donnees[-which(is.na(donnees$SAP_FLOW)),]
# supprime colonnes inutiles
donnees = donnees[,-1]# supprime premier colonne d'index
# Pas PRI la nuit : On supprime la colonne
donnees = donnees[,-which(colnames(donnees)=="PRI")]
summary(donnees)
# Separer train et test au hasard
sample <- sample.int(n = nrow(donnees), size = round(nrow(donnees)*70/100,0), replace = F)
train <- donnees[sample, ]
test  <- donnees[-sample, ]
# Sauvegarde des données :
write.csv(train,"F:/MIASHS/TER/Vegeta/data/data_train_test/Puechabon_train.csv")
write.csv(test,"F:/MIASHS/TER/Vegeta/data/data_train_test/Puechabon_test.csv")
path<-"F:/MIASHS/TER/Vegeta/data/data_train_test/Puechabon_train.csv"
donnees_base <- read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
head(donnees_base)
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
summary(donnees_base)
donnees_base = donnees_base[,-1]# supprime premier colonne d'index
#############  Transforme les dates
donnees_base$dates = strptime(donnees_base$date,format = "%Y-%m-%d %H:%M:%S")
donnees_base$heure_solaire = strptime(donnees_base$heure_solaire,format = "%H:%M")
#############  Supprime colonnes inutiles pour le moment
donnees<- donnees_base[,-which(names(donnees_base) %in% c("TIMESTAMP_START","TIMESTAMP_END","DTime","dates","heure_solaire"))]
library(FactoMineR)
library(factoextra) # pour les graphes
library(tidyverse)
library(dplyr)
library(tidyr)
res_pca<- PCA(donnees, scale.unit = TRUE, graph = F)
######### ######### #########
######### importer et transformer les données de base
######### ######### #########
############# Importer les données
path<-"F:/MIASHS/TER/Vegeta/data/data_train_test/Puechabon_train.csv"
donnees_base <- read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
head(donnees_base)
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
summary(donnees_base)
donnees_base = donnees_base[,-1]# supprime premier colonne d'index
#############  Transforme les dates
donnees_base$dates = strptime(donnees_base$date,format = "%Y-%m-%d %H:%M:%S")
donnees_base$heure_solaire = strptime(donnees_base$heure_solaire,format = "%H:%M")
#############  Supprime colonnes inutiles pour le moment
donnees<- donnees_base[,-which(names(donnees_base) %in% c("TIMESTAMP_START","TIMESTAMP_END","DTime","dates","heure_solaire"))]
summary(donnees)
for(i in colnames(donnees)){
if(is.numeric(donnees[,i])==TRUE){
donnees[which(is.na(donnees[,i])),i] <- mean(donnees[,i],na.rm=TRUE)
}
}
summary(donnees)
donnees<- donnees[,-which(names(donnees_base) %in% c("SAP_FLOW"))]
summary(donnees)
path<-"F:/MIASHS/TER/Vegeta/data/data_train_test/Puechabon_train.csv"
donnees_base <- read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
head(donnees_base)
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
summary(donnees_base)
donnees_base = donnees_base[,-1]# supprime premier colonne d'index
#############  Transforme les dates
donnees_base$dates = strptime(donnees_base$date,format = "%Y-%m-%d %H:%M:%S")
donnees_base$heure_solaire = strptime(donnees_base$heure_solaire,format = "%H:%M")
#############  Supprime colonnes inutiles pour le moment
donnees<- donnees_base[,-which(names(donnees_base) %in% c("TIMESTAMP_START","TIMESTAMP_END","DTime","dates","heure_solaire"))]
summary(donnees)
############# Remplacement des valeurs manquantes par valeur moyenne
for(i in colnames(donnees)){
if(is.numeric(donnees[,i])==TRUE){
donnees[which(is.na(donnees[,i])),i] <- mean(donnees[,i],na.rm=TRUE)
}
}
summary(donnees)
############ On enlève le sap flow
donnees<- donnees[,-which(names(donnees) %in% c("SAP_FLOW"))]
summary(donnees)
res_pca<- PCA(donnees, scale.unit = TRUE, graph = F)
fviz_screeplot(res_pca)
res_pca$eig
fviz_pca_var(res_pca, axes=c(1,2), repel = TRUE)
path<-"F:/MIASHS/TER/Vegeta/data/data_train_test/Puechabon_train.csv"
donnes_train<-read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
donnes_train$type<-"train"
path<-"F:/MIASHS/TER/Vegeta/data/data_train_test/Puechabon_test.csv"
donnes_test<-read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
donnes_test$type<-"test"
donnees_base <-c(donnes_train,donnes_test)
summary(donnees_base)
path<-"F:/MIASHS/TER/Vegeta/data/data_train_test/Puechabon_train.csv"
donnes_train<-read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
donnes_train$type<-"train"
path<-"F:/MIASHS/TER/Vegeta/data/data_train_test/Puechabon_test.csv"
donnes_test<-read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
donnes_test$type<-"test"
donnees_base <-data.frame(donnes_train,donnes_test)
path<-"F:/MIASHS/TER/Vegeta/data/data_train_test/Puechabon_train.csv"
donnes_train<-read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
donnes_train$type<-"train"
path<-"F:/MIASHS/TER/Vegeta/data/data_train_test/Puechabon_test.csv"
donnes_test<-read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
donnes_test$type<-"test"
donnees_base <-rbind(donnes_train,donnes_test)
summary(donnees_base)
donnees_base$type
head(donnees_base)
donnees_base <-rbind(donnes_train,donnes_test)
head(donnees_base)
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
summary(donnees_base)
donnees_base = donnees_base[,-1]# supprime premier colonne d'index
donnees_base$dates = strptime(donnees_base$date,format = "%Y-%m-%d %H:%M:%S")
donnees_base$heure_solaire = strptime(donnees_base$heure_solaire,format = "%H:%M")
#############  Supprime colonnes inutiles pour le moment
donnees<- donnees_base[,-which(names(donnees_base) %in% c("TIMESTAMP_START","TIMESTAMP_END","DTime","dates","heure_solaire"))]
summary(donnees)
############# Remplacement des valeurs manquantes par valeur moyenne
for(i in colnames(donnees)){
if(is.numeric(donnees[,i])==TRUE){
donnees[which(is.na(donnees[,i])),i] <- mean(donnees[,i],na.rm=TRUE)
}
}
summary(donnees)
train <- as.data.frame(donnees[which(donnees$type=="train"),])
test <- as.data.frame(donnees[which(donnees$type=="test"),])
head(train)
head(test)
which(names(donnees_base)=="SAP_FLOW")
res_pca<- PCA(train[,-which(names(train)=="SAP_FLOW")], scale.unit = TRUE, graph = F)
res_pca<- PCA(train[,-which(names(donnees_base) %in% c("SAP_FLOW","type")], scale.unit = TRUE, graph = F)
fviz_screeplot(res_pca)
res_pca$eig
fviz_pca_var(res_pca, axes=c(1,2), repel = TRUE)
res_pca<- PCA(train[,-which(names(donnees_base) %in% c("SAP_FLOW","type"))], scale.unit = TRUE, graph = F)
############# Importer les données
path<-"F:/MIASHS/TER/Vegeta/data/data_train_test/Puechabon_train.csv"
donnes_train<-read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
donnes_train$type<-"train"
path<-"F:/MIASHS/TER/Vegeta/data/data_train_test/Puechabon_test.csv"
donnes_test<-read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
donnes_test$type<-"test"
donnees_base <-rbind(donnes_train,donnes_test)
head(donnees_base)
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
summary(donnees_base)
donnees_base = donnees_base[,-1]# supprime premier colonne d'index
#############  Transforme les dates
donnees_base$dates = strptime(donnees_base$date,format = "%Y-%m-%d %H:%M:%S")
donnees_base$heure_solaire = strptime(donnees_base$heure_solaire,format = "%H:%M")
#############  Supprime colonnes inutiles pour le moment
donnees<- donnees_base[,-which(names(donnees_base) %in% c("TIMESTAMP_START","TIMESTAMP_END","DTime","dates","heure_solaire"))]
summary(donnees)
############# Remplacement des valeurs manquantes par valeur moyenne
for(i in colnames(donnees)){
if(is.numeric(donnees[,i])==TRUE){
donnees[which(is.na(donnees[,i])),i] <- mean(donnees[,i],na.rm=TRUE)
}
}
summary(donnees)
############ Mise en place des donnees test/train et Y
# convert to dataframe
train <- as.data.frame(donnees[which(donnees$type=="train"),])
test <- as.data.frame(donnees[which(donnees$type=="test"),])
############ ACP
res_pca<- PCA(train[,-which(names(train) %in% c("SAP_FLOW","type"))], scale.unit = TRUE, graph = F)
fviz_screeplot(res_pca)
res_pca$eig
fviz_pca_var(res_pca, axes=c(1,2), repel = TRUE)
library(pls)
mod_pcr <- pcr(SAP_FLOW ~ ., data = train[,-which(names(train) %in% c("type"))], scale = TRUE)
pred <- predict(pcr_fit, ncomp = 5, newdata = test[,-which(names(test) %in% c("SAP_FLOW","type"))]) %>% as.data.frame %>% pull()
pred <- predict(mod_pcr, ncomp = 5, newdata = test[,-which(names(test) %in% c("SAP_FLOW","type"))]) %>% as.data.frame %>% pull()
pred <- predict(mod_pcr, ncomp = 4, newdata = test[,-which(names(test) %in% c("SAP_FLOW","type"))]) %>% as.data.frame %>% pull()
rmse <- sqrt(mean((test$SAP_FLOW - pred)^2))
rmse
mod_pcr
mod_pcr$coefficients
mod_pcr$model
