##### 1
path<-"F:/MIASHS/UEs/base_stat/SautHauteur.csv"
donnees <- read.csv(path,sep=";",dec=",",header=T)
donnees
##### 2
plot(donnees)
# Cette commande effectue des plots entre les variables deux à deux.
# Elle permet de mettre rapidement en évidence des corrélations entre certaines variables.
# On observe une corrélation positive entre la taille et la performance.
# On observe pas de corrélation entre la taille et le poids, ni entre la performance et le poids.
##### 3
# Je propose d'utiliser la taille de l'individu pour prédire les performances de saut en hauteur.
##### 4
plot(Perf~Taille,data=donnees,xlab="Taille de l'individu (m)",ylab="Performance (m)")
##### 5
Perf_moy<-mean # Moyenne des performances
Perf_sd<-sd(donnees$Perf) # Ecart type des performances
Taille_moy<-mean(donnees$Taille) # Moyenne des tailles
Taille_sd<-sd(donnees$Taille) #
cov_formule <-sum((donnees$Taille - mean(donnees$Taille))*(donnees$Perf - mean(donnees$Perf)))/lenght(donnees$Taille)
cov_formule <-sum((donnees$Taille - mean(donnees$Taille))*(donnees$Perf - mean(donnees$Perf)))/length(donnees$Taille)
cov_fct<-cov(x=donnees$Taille,y=donnees$Perf)
cov_formule
cov_fct
coef_cor<-cov_formule / sqrt(sum((donnees$Taille - mean(donnees$Taille))^2) * sum((donnees$Perf - mean(donnees$Perf))^2))
coef_cor
cor(x=donnees$Taille,y=donnees$Perf)
coef_cor<-cov_formule / (var(donnees$Taille)*var(donnees$Perf))
coef_cor
cov_formule
coef_cor<-cov_formule / (Taille_sd*Perf_sd)
coef_cor
coef_cor_R<-cor(x=donnees$Taille,y=donnees$Perf)
coef_cor_R
test<-cor.test(x=donnees$Taille,y=donnees$Perf)
test
lm(donnees$Perfdonnees$Taille)
lm(donnees$Perf~donnees$Taille)
reg<-lm(donnees$Perf~donnees$Taille)
summary(reg)
help(summary)
coef_cor_R*coef_cor_R
reg$coefficients[1]
reg$coefficients[2]
2.93* 2 - 3.59
##### 1
path<-"F:/MIASHS/UEs/base_stat/SautHauteur.csv"
donnees <- read.csv(path,sep=";",dec=",",header=T)
donnees
##### 2
plot(donnees)
# Cette commande effectue des plots entre les variables deux à deux.
# Elle permet de mettre rapidement en évidence des corrélations entre certaines variables.
# On observe une corrélation positive entre la taille et la performance.
# On n'observe pas de corrélation entre la taille et le poids, ni entre la performance et le poids.
##### 3
# Je propose d'utiliser la taille de l'individu pour prédire les performances de saut en hauteur.
##### 4
plot(Perf~Taille,data=donnees,xlab="Taille de l'individu (m)",ylab="Performance (m)")
Perf_moy<-mean # Moyenne des performances
Perf_sd<-sd(donnees$Perf) # Ecart type des performances
Taille_moy<-mean(donnees$Taille) # Moyenne des tailles
Taille_sd<-sd(donnees$Taille) # Ecart type des tailles
Taille_sd
Perf_moy
Perf_sd
Taille_moy
Perf_moy<-mean(donnees$Perf) # Moyenne des performances =
Perf_moy
Perf_sd
Taille_moy
Taille_sd
cov_formule <-sum((donnees$Taille - mean(donnees$Taille))*(donnees$Perf - mean(donnees$Perf)))/length(donnees$Taille)
cov_fct<-cov(x=donnees$Taille,y=donnees$Perf)
cov_formule
cov_fct<-cov(x=donnees$Taille,y=donnees$Perf)
cov_fct
cov_formule <-(sum((donnees$Taille - mean(donnees$Taille))*(donnees$Perf - mean(donnees$Perf))))/length(donnees$Taille)
cov_formule
coef_cor<-cov_formule / (Taille_sd*Perf_sd)
coef_cor
coef_cor_R<-cor(x=donnees$Taille,y=donnees$Perf)
coef_cor_R
shapiro.test(donnees$Taille)
?shapiro.test
shapiro.test(donnees$Perf) # pvalue = 0.9789 : On ne rejette pas H0, les données sont issues d'une population normalement distribuée
donnees
(sum(donnees$Taille*donnees$Perf)-((sum(donnees$Taille)*sum(donnees$Perf))/length(donnees$Taille)))/(sqrt((sum(donnees$Taille^2)-((sum(donnees$Taille)^2)/length(donnees$Taille)))*(sum(donnees$Perf^2)-((sum(donnees$Perf)^2)/length(donnees$Perf)))))
coef_cor<-(sum(donnees$Taille*donnees$Perf)-((sum(donnees$Taille)*sum(donnees$Perf))/length(donnees$Taille)))/(sqrt((sum(donnees$Taille^2)-((sum(donnees$Taille)^2)/length(donnees$Taille)))*(sum(donnees$Perf^2)-((sum(donnees$Perf)^2)/length(donnees$Perf)))))
coef_cor
n<-length(donnees$Taille)
coef_cor<-(sum(donnees$Taille*donnees$Perf)-((sum(donnees$Taille)*sum(donnees$Perf))/n))/
sqrt((sum(donnees$Taille^2)-((sum(donnees$Taille)^2)/n))*(sum(donnees$Perf^2)-((sum(donnees$Perf)^2)/n)))
coef_cor
N<-length(donnees$Taille)
cov_formule <-(sum((donnees$Taille - Taille_moy)*(donnees$Perf - Perf_moy)))/N
cov_formule
coef_cor<-(sum(donnees$Taille*donnees$Perf)-((sum(donnees$Taille)*sum(donnees$Perf))/N))/
sqrt((sum(donnees$Taille^2)-((sum(donnees$Taille)^2)/N))*(sum(donnees$Perf^2)-((sum(donnees$Perf)^2)/N)))
coef_cor_R<-cor(x=donnees$Taille,y=donnees$Perf)
coef_cor
coef_cor_R<-cor(x=donnees$Taille,y=donnees$Perf)
coef_cor_R
coef_cor_R<-cor(x=donnees$Taille,y=donnees$Perf,method="Pearson")
coef_cor_R<-cor(x=donnees$Taille,y=donnees$Perf,method="pearson")
coef_cor_R
t = coef_cor_R / sqrt((1-coef_cor_R^2)/(N-2))
t
N
test<-cor.test(x=donnees$Taille,y=donnees$Perf)
test
test<-cor.test(x=donnees$Taille,y=donnees$Perf)
test
reg<-lm(donnees$Perf~donnees$Taille)
summary(reg)
y = reg$coefficients[2] * x +  reg$coefficients[1]
resultat <- 2.93* 2 - 3.59
resultat
path<-"F:/MIASHS/TER/data/EFDC_L2_Flx_FRHes_2010_v010_30m.txt"
donnees <- read.table(path,sep=",",dec=",",header=T)
length(donnees[,33])
i<-4
plot(donnees[,33]~donnees[,i])}
plot(donnees[,33]~donnees[,i])
donnees[,i]
donnees[,4:33]<-as.numeric(as.character(donnees[,4:33]))
plot(donnees[,33]~donnees[,i])}
plot(donnees[,33]~donnees[,i])
donnees[,i]
path<-"F:/MIASHS/TER/data/EFDC_L2_Flx_FRHes_2010_v010_30m.txt"
donnees <- read.table(path,sep=",",dec=",",header=T)
head(donnees)
donnees <- donnees[-which(donnees$SAP_FLOW =="-9999"),]
donnees[,i]
for (i in 4:33){
donnees[,i]<-as.numeric(as.character(donnees[,i]))}
donnees[,i]
pdf("scatterplots.pdf")
for (i in 4:32){
plot(donnees[,33]~donnees[,i])}
dev.off()
colnames(donnees)[i]
colnames(donnees)
pdf("scatterplots.pdf")
for (i in 4:32){
plot(donnees[,33]~donnees[,i],ylab="Sap flow",xlab=colnames(donnees)[i])}
dev.off()
?read.table
donnees <- read.table(path,sep=",",dec=",",header=T,na.strings = "-9999")
donnees <- donnees[-which(donnees$SAP_FLOW =="-9999"),]
for (i in 4:33){
donnees[,i]<-as.numeric(as.character(donnees[,i]))}
# PDF des correlations
pdf("scatterplots.pdf")
for (i in 4:32){
plot(donnees[,33]~donnees[,i],ylab="Sap flow",xlab=colnames(donnees)[i])}
dev.off()
.plot
?plot
donnees[,i]
donnees$SAP_FLOW
donnees <- read.table(path,sep=",",dec=",",header=T,na.strings = "-9999")
donnees$SAP_FLOW
which(is.na(donnees$SAP_FLOW ))
donnees <- donnees[-which(is.na(donnees$SAP_FLOW )),]
for (i in 4:33){
donnees[,i]<-as.numeric(as.character(donnees[,i]))}
pdf("scatterplots.pdf")
for (i in 4:32){
plot(donnees[,33]~donnees[,i],ylab="Sap flow",xlab=colnames(donnees)[i])}
dev.off()
head(donnees)
substring(donnees$TIMESTAMP_END,4)
substring(donnees$TIMESTAMP_END[1],4)
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
substrRight(donnees$TIMESTAMP_END[1],4)
substrRight(donnees$TIMESTAMP_END,4)
donnees$heure <- substrRight(donnees$TIMESTAMP_END,4)
for (i in 4:34){
donnees[,i]<-as.numeric(as.character(donnees[,i]))}
pdf("scatterplots.pdf")
for (i in 4:32){
plot(donnees[,33]~donnees[,i],ylab="Sap flow",xlab=colnames(donnees)[i])}
dev.off()
pdf("scatterplots.pdf")
for (i in c(4:32,34)){
plot(donnees[,33]~donnees[,i],ylab="Sap flow",xlab=colnames(donnees)[i])}
dev.off()
es <- 0.6108 * exp(17.27 * donnees$TA / (donnees$TA + 237.3))
ea <- donnees$RH/ 100 * es
VPD <- ea - es
VPD
get.es <- function(temp){
es <- 6.11 * exp((2.5e6 / 461) * (1 / 273 - 1 / (273 + temp)))
return(es)
}
get.es(donnees$TA)
get.vpd <- function(rh, temp){
## calculate saturation vapor pressure
es <- get.es(temp)
## calculate vapor pressure deficit
vpd <- ((100 - rh) / 100) * es
return(vpd)
}
get.vpd(donnees$RH,donnees$TA)
es <- 0.6108 * exp(17.27 * donnees$TA / (donnees$TA + 237.3))
ea <- donnees$RH/ 100 * es
VPD <- ea - es
VPD
VPD <- es - ea
VPD
get.es <- function(temp){
es <- 6.11 * exp((2.5e6 / 461) * (1 / 273 - 1 / (273 + temp)))
return(es)
}
get.vpd <- function(rh, temp){
## calculate saturation vapor pressure
es <- get.es(temp)
## calculate vapor pressure deficit
vpd <- ((100 - rh) / 100) * es
return(vpd)
}
VPD<-get.vpd(donnees$RH,donnees$TA)
head(VPD)
es <- 0.6108 * exp((17.27 * donnees$TA) / (donnees$TA + 237.3))
ea <- donnees$RH/ 100 * es
VPD <- es - ea
head(VPD)
VPD <- VPD/10 # En kPa
get.es <- function(temp){
es <- 6.11 * exp((2.5e6 / 461) * (1 / 273 - 1 / (273 + temp)))
return(es)
}
get.vpd <- function(rh, temp){
## calculate saturation vapor pressure
es <- get.es(temp)
## calculate vapor pressure deficit
vpd <- ((100 - rh) / 100) * es
return(vpd)
}
VPD<-get.vpd(donnees$RH,donnees$TA) # en milibars
VPD <- VPD/10 # En kPa
head(VPD)
es <- 0.6108 * exp((17.27 * donnees$TA) / (donnees$TA + 237.3))
ea <- donnees$RH/ 100 * es
VPD <- es - ea # en kPa
head(VPD)
donnees <- read.table(path,sep=",",dec=",",header=T,na.strings = "-9999")
head(donnees)
# Supprime les données où -9999 dans sap flow
donnees <- donnees[-which(is.na(donnees$SAP_FLOW )),]
# selectionner les heures:
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
donnees$heure <- substrRight(donnees$TIMESTAMP_END,4)
# Transforme tout en numerique
for (i in 4:34){
donnees[,i]<-as.numeric(as.character(donnees[,i]))}
# Calcul du VPD:
es <- 0.6108 * exp((17.27 * donnees$TA) / (donnees$TA + 237.3))
ea <- donnees$RH/ 100 * es
VPD <- es - ea # en kPa
donnees$VPD <-VPD
path<-"F:/MIASHS/TER/Vegeta/Anaelle/data/EFDC_L2_Flx_FRHes_2010_v010_30m.txt"
donnees <- read.table(path,sep=",",dec=",",header=T,na.strings = "-9999")
head(donnees)
# Supprime les données où -9999 dans sap flow
donnees <- donnees[-which(is.na(donnees$SAP_FLOW )),]
# selectionner les heures:
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
donnees$heure <- substrRight(donnees$TIMESTAMP_END,4)
# Transforme tout en numerique
for (i in 4:34){
donnees[,i]<-as.numeric(as.character(donnees[,i]))}
# Calcul du VPD:
es <- 0.6108 * exp((17.27 * donnees$TA) / (donnees$TA + 237.3))
ea <- donnees$RH/ 100 * es
VPD <- es - ea # en kPa
donnees$VPD <-VPD
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
write.csv(donnees,"data_ok.csv")
pdf("scatterplots.pdf")
for (i in c(4:32,34,35)){
plot(donnees$SAP_FLOW~donnees[,i],ylab="Sap flow",xlab=colnames(donnees)[i])}
dev.off()
