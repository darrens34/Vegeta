text(data[,i],rownames(data[,i]))
}
dim(data);summary(data)
res_pca <-PCA(data %>% select_if(is.numeric), ncp=5, scale.unit = TRUE, graph = F)
tab<-round(res_pca$eig[1:10,],2);colnames(tab)<-c("eigenval","% var","cum % var");tab
fviz_screeplot(res_pca, ncp=10)
fviz_pca_biplot(res_pca, ncp=5,axes = c(1, 2)) + ylim (-3.5, 5.5)
fviz_pca_biplot(res_pca, ncp=5,axes = c(1, 3)) + ylim (-3.5,3.5)
round(res_pca$var$contrib,2)
fviz_contrib(res_pca, choice = "var", axes = 1) # Pour la première dimension
fviz_contrib(res_pca, choice = "var", axes = 2)
fviz_contrib(res_pca, choice = "var", axes = 3)
round(res_pca$var$cos2,2)
fviz_cos2(res_pca, choice = "var", axes = 1) # Pour la première dimension
fviz_cos2(res_pca, choice = "var", axes = 2)
fviz_cos2(res_pca, choice = "var", axes = 3)
round(res_pca$ind$contrib,2)
fviz_contrib(res_pca, choice = "ind", axes = 1) # Pour la première dimension
fviz_contrib(res_pca, choice = "ind", axes = 2)
fviz_contrib(res_pca, choice = "ind", axes = 3)
round(res_pca$ind$cos2,2)
fviz_cos2(res_pca, choice = "ind", axes = 1) # Pour la première dimension
fviz_cos2(res_pca, choice = "ind", axes = 2)
fviz_cos2(res_pca, choice = "ind", axes = 3)
data_train =   data[grep("train",data$nom),-which(colnames(data) %in% c("vent","nom"))]
data_test =   data[grep("test",data$nom),-which(colnames(data) %in% c("h13d","nom","vent"))]
data_test_h13d = data[grep("test",data$nom),"h13d"]
dim(data_train)
dim(data_test)
mod_lm = lm(h13d~.,data=data_train)
summary(mod_lm)
data[21,]
data[13,]
data[c(6,16,20,25,40,41),]
data[c(2,5,17,26,19,34,35,3),]
data[c(1,4,21,18,33),]
data[c(39),]
data[c(13),]
data[c(1),]
data_train =   data[grep("train",data$nom),-which(colnames(data) %in% c("nom"))]
corDF = cor(data_train[,-which(colnames(data_train)=="vent")])
dissimilarity <- 1 - abs(corDF)
distance <- as.dist(dissimilarity)
hc <- hclust(distance)
clusterV = cutree(hc,h=0.05)
print(clusterV)
data[c(17,5,26,2,19,35,3,34)]
data[c(17,5,26,2,19,35,3,34),]
data[c(6,40,20,41,25,16),]
knitr::opts_chunk$set(fig.align = "center")
library(dplyr);library(tidyr)
library(FactoMineR);library(factoextra)
library(pls) # PCR, PLSR
library(MASS) # LDA
path = "F:/MIASHS/UEs/ACP/projet/" # Choix du path
data <- data.frame() # Création de data
fichiers = list.files(paste0(path,"group6/")) # Liste des fichiers csv
# Import et agrégation des fichiers :
for(i in fichiers){
subdata = read.table(paste0(path,"group6/",i),sep=";",dec=",",header=TRUE,na.strings = c("NA","<NA>"))
subdata = cbind(subdata,"nom"=i)
data = rbind(data,subdata)
}
# Informations sur data :
dim(data);summary(data)
data = data[,-c(which(colnames(data)=="nbsys"):which(colnames(data)=="sigmam_s4"))]
data = data[,-which(colnames(data)=="X")]
data = data[-which(data$nom=="pem_02B04-test.csv"),]
rownames(data) <- NULL
for(i in colnames(data)){
if(is.numeric(data[,i])==TRUE){
data[which(is.na(data[,i])),i] <- median(data[,i],na.rm=TRUE)
}
}
plot(data$skew);plot(data$kurt)
data_vent <-read.csv(paste0(path,"enrichissement/vent.csv"),sep=";",dec=",",header=TRUE)
data$dateheure <- strptime(data$dateheure,format = "%Y-%m-%d %H:%M:%S")
data_vent$dateheure <- strptime(data_vent$date,format = "%d/%m/%y %H:%M")
data$vent <-NA
for(i in 1:nrow(data)){
code <-strsplit(as.character(data[i,"nom"]),"_|-")[[1]][2]
ladate <- data[i,"dateheure"]
data$vent[i]<-data_vent$vent_moy_km_h[data_vent$code==code & data_vent$dateheure == ladate]
}
data$vent <- as.numeric(as.character(data$vent))
# Transformation en variable qualitative :
data$vent_quali<-NA
data$vent_quali[which(data$vent<=20)]<- "faible"
data$vent_quali[which(data$vent>20)]<- "modere"
data$vent<-data$vent_quali
# Suppression des colonnes inutiles :
data <- data[,-which(colnames(data)=="dateheure")]
data <- data[,-which(colnames(data)=="vent_quali")]
for(i in colnames(data %>% select_if(is.numeric))){
plot(data[,i],main=i,type="n")
text(data[,i],rownames(data[,i]))
}
dim(data);summary(data)
res_pca <-PCA(data %>% select_if(is.numeric), ncp=5, scale.unit = TRUE, graph = F)
tab<-round(res_pca$eig[1:10,],2);colnames(tab)<-c("eigenval","% var","cum % var");tab
fviz_screeplot(res_pca, ncp=10)
fviz_pca_biplot(res_pca, ncp=5,axes = c(1, 2)) + ylim (-3.5, 5.5)
fviz_pca_biplot(res_pca, ncp=5,axes = c(1, 3)) + ylim (-3.5,3.5)
round(res_pca$var$contrib,2)
fviz_contrib(res_pca, choice = "var", axes = 1) # Pour la première dimension
fviz_contrib(res_pca, choice = "var", axes = 2)
fviz_contrib(res_pca, choice = "var", axes = 3)
round(res_pca$var$cos2,2)
fviz_cos2(res_pca, choice = "var", axes = 1) # Pour la première dimension
fviz_cos2(res_pca, choice = "var", axes = 2)
fviz_cos2(res_pca, choice = "var", axes = 3)
round(res_pca$ind$contrib,2)
fviz_contrib(res_pca, choice = "ind", axes = 1) # Pour la première dimension
fviz_contrib(res_pca, choice = "ind", axes = 2)
fviz_contrib(res_pca, choice = "ind", axes = 3)
round(res_pca$ind$cos2,2)
fviz_cos2(res_pca, choice = "ind", axes = 1) # Pour la première dimension
fviz_cos2(res_pca, choice = "ind", axes = 2)
fviz_cos2(res_pca, choice = "ind", axes = 3)
data_train =   data[grep("train",data$nom),-which(colnames(data) %in% c("vent","nom"))]
data_test =   data[grep("test",data$nom),-which(colnames(data) %in% c("h13d","nom","vent"))]
data_test_h13d = data[grep("test",data$nom),"h13d"]
dim(data_train)
dim(data_test)
mod_lm = lm(h13d~.,data=data_train)
summary(mod_lm)
pred <- predict(mod_lm, newdata = data_test) %>% as.data.frame %>% pull()
rmse_lm <- sqrt(mean((data_test_h13d- pred)^2))
rrmse_lm <- sqrt(mean(((data_test_h13d- pred)/data_test_h13d)^2))
cat("Le RMSE pour le modèle linéaire classique est de : ",round(rmse_lm,2),".\n")
cat("Le RRMSE pour le modèle linéaire classique est de : ",round(rrmse_lm,2),".")
mod_pcr <- pcr(h13d ~ ., data = data_train, scale = TRUE)
plot(RMSEP(mod_pcr), legendpos = "topright",main="PCR")
mod_pcr <- pcr(h13d ~ ., data = data_train, scale = TRUE,ncomp=8)
mod_pcr$coefficients
pred <- predict(mod_pcr, ncomp=8,newdata = data_test) %>% as.data.frame %>% pull()
rmse_pcr <- sqrt(mean((data_test_h13d- pred)^2))
rrmse_pcr <- sqrt(mean(((data_test_h13d- pred)/data_test_h13d)^2))
cat("Le RMSE pour la régression sur composantes principales est de : ",round(rmse_pcr,2),".\n")
cat("Le RRMSE pour la régression sur composantes principales est de : ",round(rrmse_pcr,2),".")
mod_plsr <- plsr(h13d ~ ., data = data_train, scale = TRUE, validation = "LOO")
plot(RMSEP(mod_plsr),legendpos="topright",main="PLSR")
mod_plsr <- plsr(h13d ~ ., data = data_train, scale = TRUE, validation = "LOO",ncomp=5)
mod_plsr$coefficients
pred <- predict(mod_plsr, ncomp=5,newdata = data_test) %>% as.data.frame %>% pull()
rmse_plsr <- sqrt(mean((data_test_h13d- pred)^2))
rrmse_plsr <- sqrt(mean(((data_test_h13d- pred)/data_test_h13d)^2))
cat("Le RMSE pour la PLSR est de : ",round(rmse_plsr,2),".\n")
cat("Le RRMSE pour la PLSR est de : ",round(rrmse_plsr,2),".")
data_train =   data[grep("train",data$nom),-which(colnames(data) %in% c("nom","vent"))]
data_test =   data[grep("test",data$nom),-which(colnames(data) %in% c("nom","vent"))]
res_pca <-PCA(data_train, scale.unit = TRUE, graph = F)
hc <- HCPC(res_pca, nb.clust = -1)
fviz_cluster(hc,
repel = TRUE,            # Evite le chevauchement des textes
show.clust.cent = TRUE, # Montre le centre des clusters
palette = "jco",         # Palette de couleurs, voir ?ggpubr::ggpar
ggtheme = theme_minimal(),
main = "Factor map"
)
hc$desc.var$quanti
data[c(40,41,20,25,6,16)]
data[c(40,41,20,25,6,16),]
187+68.8+103.4+312.6+146.4+258
(187+68.8+103.4+312.6+146.4+258)/6
data$nom
knitr::opts_chunk$set(fig.align = "center")
library(dplyr);library(tidyr)
library(FactoMineR);library(factoextra)
library(pls) # PCR, PLSR
library(MASS) # LDA
path = "F:/MIASHS/UEs/ACP/projet/" # Choix du path
data <- data.frame() # Création de data
fichiers = list.files(paste0(path,"group6/")) # Liste des fichiers csv
# Import et agrégation des fichiers :
for(i in fichiers){
subdata = read.table(paste0(path,"group6/",i),sep=";",dec=",",header=TRUE,na.strings = c("NA","<NA>"))
subdata = cbind(subdata,"nom"=i)
data = rbind(data,subdata)
}
# Informations sur data :
dim(data);summary(data)
data = data[,-c(which(colnames(data)=="nbsys"):which(colnames(data)=="sigmam_s4"))]
data = data[,-which(colnames(data)=="X")]
data = data[-which(data$nom=="pem_02B04-test.csv"),]
rownames(data) <- NULL
for(i in colnames(data)){
if(is.numeric(data[,i])==TRUE){
data[which(is.na(data[,i])),i] <- median(data[,i],na.rm=TRUE)
}
}
plot(data$skew);plot(data$kurt)
data_vent <-read.csv(paste0(path,"enrichissement/vent.csv"),sep=";",dec=",",header=TRUE)
data$dateheure <- strptime(data$dateheure,format = "%Y-%m-%d %H:%M:%S")
data_vent$dateheure <- strptime(data_vent$date,format = "%d/%m/%y %H:%M")
data$vent <-NA
for(i in 1:nrow(data)){
code <-strsplit(as.character(data[i,"nom"]),"_|-")[[1]][2]
ladate <- data[i,"dateheure"]
data$vent[i]<-data_vent$vent_moy_km_h[data_vent$code==code & data_vent$dateheure == ladate]
}
data$vent <- as.numeric(as.character(data$vent))
# Transformation en variable qualitative :
data$vent_quali<-NA
data$vent_quali[which(data$vent<=20)]<- "faible"
data$vent_quali[which(data$vent>20)]<- "modere"
data$vent<-data$vent_quali
# Suppression des colonnes inutiles :
data <- data[,-which(colnames(data)=="dateheure")]
data <- data[,-which(colnames(data)=="vent_quali")]
for(i in colnames(data %>% select_if(is.numeric))){
plot(data[,i],main=i,type="n")
text(data[,i],rownames(data[,i]))
}
dim(data);summary(data)
res_pca <-PCA(data %>% select_if(is.numeric), ncp=5, scale.unit = TRUE, graph = F)
tab<-round(res_pca$eig[1:10,],2);colnames(tab)<-c("eigenval","% var","cum % var");tab
fviz_screeplot(res_pca, ncp=10)
fviz_pca_biplot(res_pca, ncp=5,axes = c(1, 2)) + ylim (-3.5, 5.5)
fviz_pca_biplot(res_pca, ncp=5,axes = c(1, 3)) + ylim (-3.5,3.5)
round(res_pca$var$contrib,2)
fviz_contrib(res_pca, choice = "var", axes = 1) # Pour la première dimension
fviz_contrib(res_pca, choice = "var", axes = 2)
fviz_contrib(res_pca, choice = "var", axes = 3)
round(res_pca$var$cos2,2)
fviz_cos2(res_pca, choice = "var", axes = 1) # Pour la première dimension
fviz_cos2(res_pca, choice = "var", axes = 2)
fviz_cos2(res_pca, choice = "var", axes = 3)
round(res_pca$ind$contrib,2)
fviz_contrib(res_pca, choice = "ind", axes = 1) # Pour la première dimension
fviz_contrib(res_pca, choice = "ind", axes = 2)
fviz_contrib(res_pca, choice = "ind", axes = 3)
round(res_pca$ind$cos2,2)
fviz_cos2(res_pca, choice = "ind", axes = 1) # Pour la première dimension
fviz_cos2(res_pca, choice = "ind", axes = 2)
fviz_cos2(res_pca, choice = "ind", axes = 3)
data_train =   data[grep("train",data$nom),-which(colnames(data) %in% c("vent","nom"))]
data_test =   data[grep("test",data$nom),-which(colnames(data) %in% c("h13d","nom","vent"))]
data_test_h13d = data[grep("test",data$nom),"h13d"]
dim(data_train)
dim(data_test)
mod_lm = lm(h13d~.,data=data_train)
summary(mod_lm)
pred <- predict(mod_lm, newdata = data_test) %>% as.data.frame %>% pull()
rmse_lm <- sqrt(mean((data_test_h13d- pred)^2))
rrmse_lm <- sqrt(mean(((data_test_h13d- pred)/data_test_h13d)^2))
cat("Le RMSE pour le modèle linéaire classique est de : ",round(rmse_lm,2),".\n")
cat("Le RRMSE pour le modèle linéaire classique est de : ",round(rrmse_lm,2),".")
mod_pcr <- pcr(h13d ~ ., data = data_train, scale = TRUE)
plot(RMSEP(mod_pcr), legendpos = "topright",main="PCR")
mod_pcr <- pcr(h13d ~ ., data = data_train, scale = TRUE,ncomp=8)
mod_pcr$coefficients
pred <- predict(mod_pcr, ncomp=8,newdata = data_test) %>% as.data.frame %>% pull()
rmse_pcr <- sqrt(mean((data_test_h13d- pred)^2))
rrmse_pcr <- sqrt(mean(((data_test_h13d- pred)/data_test_h13d)^2))
cat("Le RMSE pour la régression sur composantes principales est de : ",round(rmse_pcr,2),".\n")
cat("Le RRMSE pour la régression sur composantes principales est de : ",round(rrmse_pcr,2),".")
mod_plsr <- plsr(h13d ~ ., data = data_train, scale = TRUE, validation = "LOO")
plot(RMSEP(mod_plsr),legendpos="topright",main="PLSR")
mod_plsr <- plsr(h13d ~ ., data = data_train, scale = TRUE, validation = "LOO",ncomp=5)
mod_plsr$coefficients
pred <- predict(mod_plsr, ncomp=5,newdata = data_test) %>% as.data.frame %>% pull()
rmse_plsr <- sqrt(mean((data_test_h13d- pred)^2))
rrmse_plsr <- sqrt(mean(((data_test_h13d- pred)/data_test_h13d)^2))
cat("Le RMSE pour la PLSR est de : ",round(rmse_plsr,2),".\n")
cat("Le RRMSE pour la PLSR est de : ",round(rrmse_plsr,2),".")
data_train =   data[grep("train",data$nom),-which(colnames(data) %in% c("nom","vent"))]
data_test =   data[grep("test",data$nom),-which(colnames(data) %in% c("nom","vent"))]
res_pca <-PCA(data_train, scale.unit = TRUE, graph = F)
hc <- HCPC(res_pca, nb.clust = -1)
fviz_cluster(hc,
repel = TRUE,            # Evite le chevauchement des textes
show.clust.cent = TRUE, # Montre le centre des clusters
palette = "jco",         # Palette de couleurs, voir ?ggpubr::ggpar
ggtheme = theme_minimal(),
main = "Factor map"
)
hc$desc.var$quanti
hc$desc.axes$quanti
test_standard <- data_test
test_standard <- t(apply(data_test, MARGIN = 1, FUN = function(x) { (x - res_pca$call$centre)/res_pca$call$ecart.type}))
test_proj <- as.matrix(test_standard) %*% res_pca$svd$V
plot(hc,choice="map",draw.tree = FALSE,xlim=c(-10,10),ylim=c(-5,5))
text(test_proj[,c(1,2)],rownames(test_proj[,c(1,2)]),pch=19,col="blue",cex=0.8)
data_train =   data[grep("train",data$nom),-which(colnames(data) %in% c("nom"))]
corDF = cor(data_train[,-which(colnames(data_train)=="vent")])
dissimilarity <- 1 - abs(corDF)
distance <- as.dist(dissimilarity)
hc <- hclust(distance)
clusterV = cutree(hc,h=0.05)
print(clusterV)
data_train =   data[grep("train",data$nom),c("h13d","th13d","thmaxd","tmaxd","sz13d" ,"szmaxd",
"tszmaxd" ,"skew"  , "kurt" , "rhh","eps2" ,"kapa" , "thetap" ,"sigmap","vent")]
data_test =   data[grep("test",data$nom),c("h13d","th13d","thmaxd","tmaxd","sz13d" ,"szmaxd",
"tszmaxd" ,"skew"  , "kurt" , "rhh","eps2" ,"kapa" , "thetap" ,"sigmap")]
data_test_vent = data[grep("test",data$nom),"vent"]
mod_lda<-lda(formula = vent ~ . , data = data_train)
# prédictions:
pred <- predict(object = mod_lda, newdata = data_test)
#plot :
plot(x=as.numeric(as.factor(data_test_vent)),
pch=19,ylab="Force du vent",cex=2,yaxt="n",ylim=c(1,2.5))
axis(side=2,at = c(1,2),labels=c("faible","modéré"))
points(x=as.numeric(pred$class),col="red",pch=19)
legend(x = 1, y =2.5,pch=19,pt.cex=2,col="black",legend="Obs",bty="n")
legend(x = 4, y =2.5,pch=19,cex=1,col="red",legend="Pred",bty="n")
sum((pred$class == "faible" & pred$class == data_test_vent) * 1 ) /  sum(( pred$class == "faible") * 1)
sum((pred$class == "modere" & pred$class == data_test_vent) * 1 ) /
sum(( pred$class == "modere") * 1)
round((0.8181818 +1)/2,2)
sum((pred$class == "faible" & pred$class == data_test_vent) * 1 ) /
sum(( data_test_vent == "faible") * 1)
sum((pred$class == "modere" & pred$class == data_test_vent) * 1 ) /
sum(( data_test_vent== "modere") * 1)
(1+0.5)/2
fviz_pca_biplot(res_pca, ncp=5,axes = c(1, 2)) + ylim (-3.5, 5.5)
fviz_pca_biplot(res_pca, ncp=5,axes = c(1, 3)) + ylim (-3.5,3.5)
data[24,]
knitr::opts_chunk$set(fig.align = "center")
library(dplyr);library(tidyr)
library(FactoMineR);library(factoextra)
library(pls) # PCR, PLSR
library(MASS) # LDA
path = "F:/MIASHS/UEs/ACP/projet/" # Choix du path
data <- data.frame() # Création de data
fichiers = list.files(paste0(path,"group6/")) # Liste des fichiers csv
# Import et agrégation des fichiers :
for(i in fichiers){
subdata = read.table(paste0(path,"group6/",i),sep=";",dec=",",header=TRUE,na.strings = c("NA","<NA>"))
subdata = cbind(subdata,"nom"=i)
data = rbind(data,subdata)
}
# Informations sur data :
dim(data);summary(data)
data = data[,-c(which(colnames(data)=="nbsys"):which(colnames(data)=="sigmam_s4"))]
data = data[,-which(colnames(data)=="X")]
data = data[-which(data$nom=="pem_02B04-test.csv"),]
rownames(data) <- NULL
for(i in colnames(data)){
if(is.numeric(data[,i])==TRUE){
data[which(is.na(data[,i])),i] <- median(data[,i],na.rm=TRUE)
}
}
plot(data$skew);plot(data$kurt)
data_vent <-read.csv(paste0(path,"enrichissement/vent.csv"),sep=";",dec=",",header=TRUE)
data$dateheure <- strptime(data$dateheure,format = "%Y-%m-%d %H:%M:%S")
data_vent$dateheure <- strptime(data_vent$date,format = "%d/%m/%y %H:%M")
data$vent <-NA
for(i in 1:nrow(data)){
code <-strsplit(as.character(data[i,"nom"]),"_|-")[[1]][2]
ladate <- data[i,"dateheure"]
data$vent[i]<-data_vent$vent_moy_km_h[data_vent$code==code & data_vent$dateheure == ladate]
}
data$vent <- as.numeric(as.character(data$vent))
# Transformation en variable qualitative :
data$vent_quali<-NA
data$vent_quali[which(data$vent<=20)]<- "faible"
data$vent_quali[which(data$vent>20)]<- "modere"
data$vent<-data$vent_quali
# Suppression des colonnes inutiles :
data <- data[,-which(colnames(data)=="dateheure")]
data <- data[,-which(colnames(data)=="vent_quali")]
for(i in colnames(data %>% select_if(is.numeric))){
plot(data[,i],main=i,type="n")
text(data[,i],rownames(data[,i]))
}
dim(data);summary(data)
plot(data$kurt)
3 * (2.4)^1.12
(2.4)^1.12
3.2 * (2.4)^1.05
2.8 * (2.4)^1.2
2.5 * (8.023646)^0.38
180/22
180*20
########## Importer les librairies
library(FactoMineR)
library(factoextra) # pour les graphes
library(tidyverse)
library(dplyr)
library(tidyr)
library(pls)
######### ######### #########
######### importer et transformer les données de base
######### ######### #########
############# Importer les données
path<-"F:/MIASHS/TER/Vegeta/data/data_train_test/Puechabon_train.csv"
donnes_train<-read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
donnes_train$type<-"train"
path<-"F:/MIASHS/TER/Vegeta/data/data_train_test/Puechabon_test.csv"
donnes_test<-read.table(path,sep=",",dec=".",header=T,na.strings = c("-9999","NA"))
donnes_test$type<-"test"
donnees_base <-rbind(donnes_train,donnes_test)
head(donnees_base)
setwd("F:/MIASHS/TER/Vegeta/Anaelle")
summary(donnees_base)
donnees_base = donnees_base[,-1]# supprime premier colonne d'index
#############  Transforme les dates
donnees_base$dates = strptime(donnees_base$date,format = "%Y-%m-%d %H:%M:%S")
donnees_base$heure_solaire = strptime(donnees_base$heure_solaire,format = "%H:%M")
#############  Supprime colonnes inutiles pour le moment
donnees<- donnees_base[,-which(names(donnees_base) %in% c("TIMESTAMP_START","TIMESTAMP_END","DTime","dates","heure_solaire"))]
summary(donnees)
############# Remplacement des valeurs manquantes par valeur moyenne
for(i in colnames(donnees)){
if(is.numeric(donnees[,i])==TRUE){
donnees[which(is.na(donnees[,i])),i] <- mean(donnees[,i],na.rm=TRUE)
}
}
summary(donnees)
############ Mise en place des donnees test/train et Y
# convert to dataframe
train <- as.data.frame(donnees[which(donnees$type=="train"),])
test <- as.data.frame(donnees[which(donnees$type=="test"),])
############ ACP
res_pca<- PCA(train[,-which(names(train) %in% c("SAP_FLOW","type"))], scale.unit = TRUE, graph = F)
fviz_screeplot(res_pca)
res_pca$eig
fviz_pca_var(res_pca, axes=c(1,2), repel = TRUE)
############ PCR
mod_pcr <- pcr(SAP_FLOW ~ ., data = train[,-which(names(train) %in% c("type"))], scale = TRUE)
summary(mod_pcr)
validationplot(mod_pcr)
mod_pcr
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(tidyverse, quietly = TRUE)
mod_pcr
summary(mod_pcr)
train_proj <- res_pca$ind$coord
train_proj
train_proj <- res_pca$ind$coord
# projeter données test
# standardisation par echantillon train (on dit que variables distribuées pareil dans echantillons train et test)
test_standard <- t(apply(test[,-which(names(test) %in% c("SAP_FLOW","type"))], MARGIN = 1, FUN = function(x) { (x-res_pca$call$centre)/res_pca$call$ecart.type } ))
# projection (matrix multiplication between individuals and dimensions coordinates)
test_proj <- as.matrix(test_standard) %*% res_pca$svd$V
plot(train_proj,pch=19,col="black");points(test_proj,pch=19,col="red")
abline(h=0,col="red",lty="dashed");abline(v=0,col="red",lty="dashed")
train <- as.data.frame(donnees[which(donnees$type=="train"),])
test <- as.data.frame(donnees[which(donnees$type=="test"),])
############ ACP
res_pca<- PCA(train[,-which(names(train) %in% c("SAP_FLOW","type"))], scale.unit = TRUE, graph = F)
fviz_screeplot(res_pca)
res_pca$eig
fviz_pca_var(res_pca, axes=c(1,2), repel = TRUE)
############ PCR
train_proj <- res_pca$ind$coord
train_proj <- as.data.frame(train_proj)
# projeter données test
# standardisation par echantillon train (on dit que variables distribuées pareil dans echantillons train et test)
test_standard <- t(apply(test[,-which(names(test) %in% c("SAP_FLOW","type"))], MARGIN = 1, FUN = function(x) { (x-res_pca$call$centre)/res_pca$call$ecart.type } ))
# projection (matrix multiplication between individuals and dimensions coordinates)
test_proj <- as.matrix(test_standard) %*% res_pca$svd$V
test_proj <- as.data.frame(test_proj)
head(train)
train_proj$SAP_FLOW <- train$SAP_FLOW
test_proj$SAP_FLOW <- test$SAP_FLOW
head(train)
head(test)
model_pcr <- lm(Points~Dim.1+Dim.2+Dim.3+Dim.4,data = train_proj)
model_pcr <- lm(SAP_FLOW~Dim.1+Dim.2+Dim.3+Dim.4,data = train_proj)
summary(model_pcr)
test_proj
res_pca$svd$V
res_pca$eig
fviz_screeplot(res_pca)
?PCA
res_pca<- PCA(train[,-which(names(train) %in% c("SAP_FLOW","type"))], scale.unit = TRUE, graph = F,ncp =5)
fviz_screeplot(res_pca)
res_pca$eig
fviz_pca_var(res_pca, axes=c(1,2), repel = TRUE)
res_pca<- PCA(train[,-which(names(train) %in% c("SAP_FLOW","type"))], scale.unit = TRUE, graph = F,ncp =5)
train_proj <- res_pca$ind$coord
train_proj <- as.data.frame(train_proj)
train_proj
# projeter données test
# standardisation par echantillon train (on dit que variables distribuées pareil dans echantillons train et test)
test_standard <- t(apply(test[,-which(names(test) %in% c("SAP_FLOW","type"))], MARGIN = 1, FUN = function(x) { (x-res_pca$call$centre)/res_pca$call$ecart.type } ))
# projection (matrix multiplication between individuals and dimensions coordinates)
test_proj <- as.matrix(test_standard) %*% res_pca$svd$V
test_proj <- as.data.frame(test_proj)
# add target column
train_proj$SAP_FLOW <- train$SAP_FLOW
test_proj$SAP_FLOW <- test$SAP_FLOW
model_pcr <- lm(SAP_FLOW~Dim.1+Dim.2+Dim.3+Dim.4+Dim.5,data = train_proj)
# summary
summary(model_pcr)
pred <- predict.lm(model_pcr,test_proj[,1:4])
test_proj
m
test_proj
pred <- predict.lm(model_pcr,test_proj[,1:5])
test_proj
colnames(test_proj) <- colnames(train_proj)
head(v)
head(test_proj)
pred <- predict.lm(model_pcr,test_proj[,1:5])
rmse <- sqrt(mean((test$SAP_FLOW - pred)^2)) ; rmse
res_pca$call$centre
res_pca$call$ecart.type
data.frame(res_pca$call$centre,res_pca$call$ecart.type)
data_stand <- data.frame("centre"=res_pca$call$centre,"reduire"=res_pca$call$ecart.type)
data_stand
train_proj
summary(model_pcr)
data_stand
res_pca$svd$V
test_proj[,1:5]
data_stand <- data.frame("centre"=res_pca$call$centre,"reduire"=res_pca$call$ecart.type)
write.csv(data_stand,"F:/MIASHS/TER/Vegeta/data/data_pour_visu_nabil/Puechabon/acp/data_stand.csv")
vec_propre <-res_pca$svd$V
write.csv(vec_propre,"F:/MIASHS/TER/Vegeta/data/data_pour_visu_nabil/Puechabon/acp/vec_propre.csv")
